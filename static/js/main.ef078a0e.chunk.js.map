{"version":3,"sources":["components/Editor.js","components/Previewer.js","App.js","serviceWorker.js","index.js"],"names":["Editor","handleChange","e","_this","props","changeMarkdown","target","value","react_default","a","createElement","className","name","id","defaultValue","this","onChange","Component","marked","require","setOptions","breaks","Previewer","dangerouslySetInnerHTML","__html","App","state","setState","components_Editor","components_Previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAiBeA,oNAdbC,aAAe,SAACC,GACdC,EAAKC,MAAMC,eAAeH,EAAEI,OAAOC,gFAInC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,YAAUE,KAAK,SAASC,GAAG,SAASC,aAAcC,KAAKX,MAAMG,MAAOS,SAAUD,KAAKd,uBATtEgB,cCAjBC,EAASC,EAAQ,IACrBD,EAAOE,WAAW,CAChBC,QAAQ,QAeKC,mLAXX,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAUU,wBAAyB,CAACC,OAAQN,EAAOH,KAAKX,MAAMG,kBALtDU,aC6CTQ,6MA7CbC,MAAQ,CACNnB,MAAK,0VA4BPF,eAAiB,SAACE,GAChBJ,EAAKwB,SAAS,CACZpB,mFAIF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAACkB,EAAD,CAAQvB,eAAgBU,KAAKV,eAAgBE,MAAOQ,KAAKW,MAAMnB,QAC/DC,EAAAC,EAAAC,cAACmB,EAAD,CAAWtB,MAAOQ,KAAKW,MAAMnB,gBAvCjBU,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ef078a0e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Editor extends Component {\r\n  handleChange = (e) => {\r\n    this.props.changeMarkdown(e.target.value);\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"editor-container\">\r\n        <h1>Editor</h1>\r\n        <textarea name=\"editor\" id=\"editor\" defaultValue={this.props.value} onChange={this.handleChange}></textarea>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Editor\r\n","import React, { Component } from 'react';\r\n\r\nlet marked = require('marked');\r\nmarked.setOptions({\r\n  breaks: true,\r\n});\r\nclass Previewer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"preview-container\">\r\n        <h1>PreViewer</h1>\r\n        <div id=\"preview\" dangerouslySetInnerHTML={{__html: marked(this.props.value)}}>\r\n        </div>\r\n      </div>\r\n    \r\n    )\r\n  }\r\n}\r\n\r\nexport default Previewer\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Editor from '../src/components/Editor';\nimport Previewer from '../src/components/Previewer';\n\nclass App extends Component {\n  state = {\n    value: \n`\n# This is h1\n## This is h2\n[Marked](https://marked.js.org)\n\nThis is an inline code\n\n\\`<code>This is my code</code>\\`\n\n\\`\\`\\`\nfunction add(num1,num2){\n  return num1 + num2\n  }\n\\`\\`\\`\n\n* Item 1\n* Item 2\n* Item 3\n\n**Bold Text**\n\n> A blockquote\n\n![fcc-logo](http://coenraets.org/blog/wp-content/uploads/2014/12/react-logo.png)\n`\n    \n  }\n  changeMarkdown = (value) => {\n    this.setState({\n      value\n    })\n  }\n  render() {\n    return (\n      <div className=\"container\">\n      <Editor changeMarkdown={this.changeMarkdown} value={this.state.value}/>\n      <Previewer value={this.state.value}/>\n      </div>\n      \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}